services:
  # =====================================
  # DATABASE SERVICES
  # =====================================
  postgres:
    image: postgres:15-alpine
    container_name: achadinhos-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-achadinhos_gabi}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-achadinhos_gabi}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - achadinhos-network

  redis:
    image: redis:7-alpine
    container_name: achadinhos-redis-prod
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - achadinhos-network

  # =====================================
  # APPLICATION SERVICES
  # =====================================
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: achadinhos-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-achadinhos_gabi}?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
      API_PORT: 3001
      API_HOST: 0.0.0.0
      WHATSAPP_SESSION_PATH: /app/sessions
    ports:
      - "${API_PORT:-3001}:3001"
    volumes:
      - whatsapp_sessions:/app/sessions
      - api_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - achadinhos-network

  # =====================================
  # OPTIONAL SERVICES
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: achadinhos-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - achadinhos-network
    profiles:
      - nginx

  # Database administration (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: achadinhos-pgadmin-prod
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@achadinhos.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - achadinhos-network
    profiles:
      - admin

  # Monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: achadinhos-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - achadinhos-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: achadinhos-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3030}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - achadinhos-network
    profiles:
      - monitoring

# =====================================
# VOLUMES
# =====================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local
  whatsapp_sessions:
    driver: local
  api_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =====================================
# NETWORKS
# =====================================
networks:
  achadinhos-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16